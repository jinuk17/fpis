= 4장 보충
김지수 <kjs8469@gmail.com>
1.0, 2017-02-03
:toc:

== https://github.com/fpinscala/fpinscala/blob/master/answers/src/main/scala/fpinscala/errorhandling/Option.scala#L6[sealed trait Option[+A\] {]
- +(covariant), -(contravariant)
- 변성 표기(Variance annotations)
- +(covariant) 는 Dog가 Animal 의 서브타입이면 Option[Dog]가 Option[Animal]의 서브타입
- -(contravariant)는 반대

== https://github.com/fpinscala/fpinscala/blob/master/answers/src/main/scala/fpinscala/errorhandling/Option.scala#L28[def orElse[B>:A\](ob: => Option[B\]): Option[B\] =]
- >: 하위 바운드(Lower bounds)
- <: 상위 바운드(Upper bounds)
- 하위 바운드의 경우 B는 A의 슈퍼타입이어야 한다
- 상위 바운드는 반대
- 메소드의 반환값도 Option[A] 대신 Option[B]
- 예로 Fruit과 두 서브클래스인 Apple과 Orange 가 있을때 Orange를 Option[Apple]에 추가할 수 있고 그 결과는 Option[Fruit]

== covariant 와 Lower bounds의 관계
=== covariant의 부작용
[source,scala]
----
class Cell[T](init: T) {
  private[this] var current = init
  def get = current
  def set(x:T) = current = x
}
----
- 위 무공변 코드를 공변으로 가정(Cell[+T]) 한다면
----
val a = new Cell[String]("abc")
val c2: Cell[Any] = c1
c2.set(1)
val s: String = c1.get
----
- 공변적이기 때문에 가능해 보이지만 타입 건전성에 위배
- Cell 코드를 공변적으로 바꾸어 보면
----
<console>:14: error: covariant type T occurs in contravariant position in type T of value x
         def set(x:T) = current = x
                 ^
----
- 위와 같은 에러가 발생
- 이는 위에서 보인 부작용을 방지하기 위해 컴파일러가 변성 표기 검사를 하기 때문
- 재할당 가능한 필드는 +로 표시한 타입 파라미터를 메소드 파라미터에 사용할 수 없다는 규칙

=== 대안
* 타입 건전성을 해치지 않고 컴파일 오류를 피하려면 하위 바운드를 이용
* 예) https://github.com/scala/scala/blob/2.12.x/src/library/scala/collection/immutable/Queue.scala#L40[Queue] 자료구조에서 https://github.com/scala/scala/blob/2.12.x/src/library/scala/collection/immutable/Queue.scala#L114[enqueue] 할때
* 마찬가지로 Fruit과 두 서브클래스인 Apple과 Orange
----
class Fruit
class Apple extends Fruit
class Orange extends Fruit
----
* Apple 이 들어있는 Queue에 Orange 를 enqueue 하면 Orange 의 슈퍼클래스인 Fruit이 된다
----
scala> val a = Queue(new Apple)
a: scala.collection.immutable.Queue[Apple] = Queue(Apple@460df441)
scala> a
res0: scala.collection.immutable.Queue[Apple] = Queue(Apple@460df441)
scala> a.enqueue(new Orange)
res1: scala.collection.immutable.Queue[Fruit] = Queue(Apple@460df441, Orange@28c38eeb)
----
* 재할당하는 필드에 대해서 슈퍼타입으로 (하위)바운드 시켜주면 공변적인 경우에도 부작용없이 처리가 가능(컴파일 오류도 없음)
* 따라서 공변성과 하위 바운드를 함께 사용하면 각기 다른 타입의 원소에 대해 유연해진다

*Reference* : Programming in Scala 책 19.3장 참고

덧 :
위 내용은 OOP적인 특성이므로 본 스터디의 목적인 함수형 프로그래밍과는 거리가 있음,
고로 갈길이 멀기 때문에 굳이 헛심 빼지 말자.
