
=== 9.6 대수의 구현

지금까지 파서 조합기를 위한 대수를 구축했고 그것을 지침으로 삼아서 Parser[JSON]의 표현도 결정했다.

지금까지 결정 기본수단

* string(s) - 하나의 string을 인식해서 돌려준다.
* regex(s) - 정규표현식 s를 인식한다.
* slice(p) - 파싱 성공시 입력 중 p가 조사한 부분을 돌려준다.
* label(e)(p) - 실패시 배정된 메시지를 e로 치환한다.
* scope(p)(f) - 실패시 e를 p가 돌려준 스택에 추가한다.
* flatMap(p)(f) - 파서를 실행한 후 그 결과에 기초해서 둘째 파서를 선택, 실행한다.
* attempt(p) - p의 확정을 p의 성공 이후로 미룬다.
* or(p1, p2) - 두 파서 중 하나를 선택한다. 먼저 p1을 시도하고, 만일 p1이 입력에 대해 미확정 상태에서 실패하면 p2를 시도한다.

> 연습문제 9.12 Skip

=== 9.6.1 가능한 구현 하나

이제 Parser의 구현을 논의해보자. 파싱 대수는 다양한 기능을 지원한다. Parser의 최종 표현으로 바로 넘어가는 대신, 대수의 기본 수단들을 조사하고 각 기본수단을 지원하는데 필요한 정보를 추론하면서 점진적으로 진행하기로 하겠다.

제일 먼저 string 조합기를 보자.

[source,scala]
----
def string(s: String): Parser[A]
----

이 조합기는 run 함수를 지원해야 한다.

[source,scala]
----
def run[A](p: Parser[A])(input: String): Either[ParseError, A]
----

첫 시도로, Parser가 다름 아닌 run 함수의 구현이라고 가정하자

[source,scala]
----
type Parser[+A] = String => Either[ParseError, A]
----

이에 기초해서 string 기본수단을 다음과 같이 구현할 수 있다.

[source,scala]
----
def string(s: String): Parse[A] =
  (input: String) =>
    if (input.startsWith(s))
      Right(s)
    else
      Left(Location(input).toError("Expected: " + s))
----

else 분기에서는 ParseError를 구축해야 한다. 여기서 ParseError를 직접 구축하는 것은 좀 불편하므로, 보조 함수 toError를 도입한다.

[source,scala]
----
def toError(msg: String): ParseError =
  ParseError(List((this, msg)))
----

=== 9.6.2 파서들의 순차 실행

안타깝게도 "abra" ** "cadabra" 같은 파서를 표현하려면 현재의 Parser 표현으로는 부족하다. "abra"의 파싱이 성공했다면 그 문자들이 소비된 것으로 간주하고, "cadabra"파서를 나머지 문자들에 대해 실행해야 한다. 이러한 순차 실행을 지원하려면 문자가 몇 개나 소비되었는지를 Parser에게 알려주는 수단이 필요하다.

[source,scala]
----
type Parser[+A] = Location => Result[A] <1>

trait Result[+A]
case class Success[+A](get: A, charsConsumed: Int) extends Result[A] <2>
case class Failure(get: ParseError) extends Result[Nothing]
----
<1> 이제 파서는 성공 또는 실패를 뜻하는 Result를 돌려준다.
<2> 성공시 파서가 소비한 문자 개수를 돌려준다.

파싱에 성공하면 파서는 A 형식의 값과 함께 소비된 입력 문자 개수도 돌려준다. 호출자는 그것을 이용해서 Location의 상태를 갱신하면 된다.

Parser는 제6장에서 구축한 것과 비슷한, 실패할 수 있는 일종의 상태 동작(state action)이다.

Parser가 그냥 하나의 상태 동작이라는 점을 깨닫고 나면, 지금까지 정의한 다종다양한 조합기들과 법칙들 모두를 지원하는 하나의 표현을 만들어 내는 방법을 떠올릴 수 있을 것이다. 조합기마다 그 조합기를 위해 이 상태 동작 형식이 추적해야 하는 정보를 파악하고(그냥 Location만으로는 부족하다), 각 조합기가 상태를 변경하는 구체적인 방식을 결정하면 된다.

> 연습문제 9.13

=== 9.6.3 파서에 이름표 붙이기

scope는 파싱 실패시 새 오류 메시지를 ParseError에 추가해야 한다. 그럼 이를 위한 보조 함수 push를 도입하자(ParseError의 메서드로 추가).

[source,scala]
----
def push(loc: Location, msg: String): ParseError =
  copy(stack = (loc,msg) :: stack)
----

다음은 이를 이용해서 구현한 scope이다.

[source,scala]
----
def scope[A](msg: String)(p: Parser[A]): Parser[A] =
  s => p(s).mapError(_.push(s, loc,msg)) <1>
----
<1> 실패시 msg를 오류 스택에 추가한다.

mapError함수는 Result에 대해 정의된다. 이 함수는 그냥 주어진 함수를 파싱 오류에 적용한다.

[source,scala]
----
def mapError(f: ParseError => ParseError): Result[A] = this match {
  case Failure(e) => Failure(f(e))
  case _ => this
}
----

내부 파서가 반환된 후에 오류를 스택에 추가하므로, 스택의 아래쪽으로 갈 수록 좀 더 나중의 파싱에서 발견된 좀 더 상세한 오류 메시지가 있다. 예를들어 scope(msg1)(a ** scope(msg2)(b)) 파서가 b의 파싱에서 실패했다면 msg1 -> a -> msg2 -> b가 생성한 오류들이다.

label도 이와 비슷하되 오류를 스택에 넣는 대신 이미 있는 오류를 대체하는 식으로 구현하면 된다.  이 역시 mapError를 이용해서 작성할 수 있다.

[source,scala]
----
def label[A](msg: String)(p: Parser[A]): Parser[A] =
  s => p(s).mapError(_.label(msg))
----

이 구현은 ParseError에 같은 이름의 메서드로 추가된 보조 함수를 사용한다. 이 label 메서드는 내부 범위의 좀 더 상세한 메시지들을 잘라내고 스택 최하단에 있는 가장 최근의 위치만 사용한다.

[source,scala]
----
def label[A](s: String): ParseError =
  ParseError(latestLoc.map((_,s)).toList)

def latestLoc: Option[Location] =
  latest map (_._1)

def latest: Option[(Location, String)] =
  stack.lastOption
----

> 연습문제 9.14 scope나 label을 (또는 둘 다) 이용해서, 오류 시 좀 더 의미 있는 오류 메시지를 제공하도록 string을 다시 구현하라.

=== 9.6.4 실패의 극복과 역추적

이제 or와 attempt를 살펴보자. 앞에서 or의 행동 방식을, 첫 파서를 실행해 보고 그것이 미확정 상태에서 실패했으면 같은 입력으로 둘째 파서를 실행해야 한다는 것으로 정했다. 그리고 입력의 문자를 하나라도 소비했다면 확정 상태인 것으로 간주하며, attempt(p)는 p의 확정 상태의 실패를 미확정 실패로 변환한다고도 말했다.

이러한 행동 방식을 구현하기 위해, Result의 Failure 경우에 새로운 정보를 추가하기로 하자.

[source,scala]
----
case class Failure(get: ParseError, isCommitted: Boolean) extends Result[Nothing]
----

attempt의 구현은 그냥 발생한 임의의 실패의 확정 상태를 취소한다. 이를 위해 uncommit이라는 보조 함수를 호출하는데, 이 함수는 Result의 메서드로 두는 것이 좋겠다.

[source,scala]
----
def attempt[A](p: Parser[A]): Parser[A] =
  s => p(s).uncommit

def uncommit: Result[A] = this match {
  case Failure(e, true) => Failure(e,false)
  case _ => this
}
----

이제 or의 구현은 그냥 isCommitted 플래그를 점검해서 그에 따라 둘째 파서를 실행하면 된다. x or y 파서에서 만일 x가 성공하면 전체 결과도 성공이다. x가 확정 상태에서 실패하면 전체를 실패로 돌리고 y의 실행을 생략한다. 그렇지 않고 x가 미확정 상태에서 실패했다면 y를 실행하고 x의 결과는 무시한다.

[source,scala]
----
def or[A](x: Parser[A], y => Parser[A]): Parser[A] =
  s => x(s) match {
    case Failure(e, false) = y(s)
    case r => r <1>
  }
----
<1> 확정 상태에서 실패했거나 성공하면 y의 실행은 생략된다.

=== 9.6.5 문맥 민감 파싱

flatMap은 첫 파서의 결과에 따라 둘째 파서를 선택한다. 이 점을 이용하면 문맥 민감 파서를 구현할 수 있다. 구현은 간단하다. 조사 위치를 전진시킨 다음에 둘째 파서를 호출하면 된다. 이번에도 새 보조함수를 사용한다. Location의 메서드인 advanceBy가 바로 그것이다. 그런데 좀 미묘한 부분이 있다. 바로, 만일 파서가 문자를 하나라도 소비한다면 둘째 파서를 확정 상태로 간주한다는 것이다. 이를 위해 ParseError의 메서드인 보조함수 addCommit을 사용한다.

[source,scala]
----
def flatMap[A, B](f: Parser[A])(g: A => Parser[B]): Parser[B] =
  s => f(s) match {
    case Success(a, n) => g(a)(s.advanceBy(n))
                            .addCommit(n != 0)
                            .advanceSuccess(n)
    case e@Failure(_,_) => e
  }
----

advancedBy의 구현은 자명하다. 그냥 오프셋을 증가하면 된다.

[source,scala]
----
def advanceBy(n: Int): Location =
  copy(offset = offset + n)
----

마찬가지로, ParseError의 메서드로 추가할 addCommit 함수 역시 간단하다.

[source,scala]
----
def addCommit(isCommitted: Boolean): Result[A] = this match {
  case Failure(e,c) => Failure(e, c || isCommitted)
  case _ => this
}
----


마지막으로, advanceSuccess는 성공한 결과에서 소비된 문자 개수를 증가한다. flatMap이 소비한 전체 문자 개수는 파서 f가 소비한 문자 개수에 g가 생성한 파서가 소비한 문자 개수를 더한 것과 같아야 한다. 이를 보장하기 위해, g의 결과에 대해 advanceSuccess를 적용한다.

[source,scala]
----
def advanceSuccess(n: Int): Result[A] = this match {
  case Success(a, m) => Success(a, n + m)
  case _ => this <1>
}
----
<1> 실패 시에는 결과를 변경하지 않는다.
