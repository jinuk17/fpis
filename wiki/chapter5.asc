= 5 엄격성과 나태성
김지수 <kjs8469@gmail.com>, 김소연, 고재도
1.0, 2017-02-06
:toc:

== 개요

* map, filter, foldLeft, foldRight, zipWith 등등 목록에 대한 연산은 주어진 입력 목록 전체를 훑고 새로운 목록을 결과로 돌려줌
* 놀이용 카드 한 벌에서
  ** 홀수 카드를 모두 제거하고
  ** 모든 퀸 카드를 뒤집는다
* *이상적인 방법*으로는
  ** 한번만 훑으면서('순회[traversal]') 홀수 카드를 제거하고
  ** 퀸 카드를 찾는 작업을 동시에 수행
* *비효율적인 방법*으로는
  ** 홀수 카드를 모두 제거한 후
  ** 남은 카드에서 퀸을 찾는 것

.비효율적인 방법의 스칼라 코드
----
scala> List(1,2,3,4).map(_ + 10).filter(_ % 2 == 0).map(_ * 3) <1><2><3><4>
res0: List[Int] = List(36, 42)
----
<1> map(_ + 10)은 임시적인 목록을 생성
<2> 그 목록은 filter(_ % 2 == 0)로 전달
<3> filter 는 새로운 목록을 만들어서 map(_ * 3)으로 전달
<4> 최종 목록 생성

* 각 변환은 자신만의 새 목록을 생성
* 그 목록은 다음 변환의 입력으로만 쓰인 후 즉시 폐기
* 평가 과정은 다음과 같을 것이다.


[source,scala]
.목록5.1 List의 프로그램 추적
----
List(1,2,3,4).map(_ + 10).filter(_ % 2 == 0).map(_ * 3)

List(11,12,13,14).filter(_ % 2 == 0).map(_ * 3)

List(12,14).map(_ * 3)

List(36,42)
----

* 임시 자료구조들의 생성을 피하려면 이런 변환들을 하나의 패스로 융합(fusion)
* 하나의 방법으로 while 루프를 작성하는것
* 그보다는 지금처럼 고수준 합성 스타일을 유지하면서 통합이 자동으로 일어나길 원함
* **__비엄격성__**(non-strictness; 비공식적으로 **__나태성__**[laziness])을 이용하면 자동적인 루프 융합이 가능

== 5.1 엄격한 함수와 엄격하지 않은 함수

* **엄격한** 함수는 자신의 인수들을 항상 평가
* 엄격하지 않은 함수는 하나 이상의 인수들을 평가하지 **않을** 수도 있음
* 대부분의 프로그래밍 언어에서는 엄격한 함수만 제공(그리고 기본)
* 스칼라에서도 엄격한 함수가 기본

.엄격한 함수의 예
----
scala> def square(x: Double): Double = x * x <1>
square: (x: Double)Double

scala> square(41.0 + 1.0)
res1: Double = 1764.0 <2>

scala> square(sys.error("failure"))
java.lang.RuntimeException: failure <3>
  at scala.sys.package$.error(package.scala:27)
  ... 30 elided
----
<1> 엄격한 함수 정의
<2> 평가된 값인 42를 받게 된다
<3> 수행하기 전에 예외가 발생

* 아직 엄격하지 않은 함수를 지정하는 구문을 배우지 않음
* 하지만 개념은 익숙함(부울 함수를 통해)
* && 는 첫째 인수가 true일 때에만 둘째 인수를 평가
* || 는 첫째 인수가 false일 때에만 둘째 인수를 평가

.비엄격 함수의 예
----
scala> false && { println("!!"); true}
res4: Boolean = false

scala> true || { println("!!"); false}
res5: Boolean = true
----

* if 제어 구조 역시 비염격성의 예

.비엄격 if 함수의 예
----
scala> val input = List()
input: List[Nothing] = List()

scala> val result = if (input.isEmpty) sys.error("empty input") else input
java.lang.RuntimeException: empty input
  at scala.sys.package$.error(package.scala:27)
  ... 30 elided

scala> val input = List(1)
input: List[Int] = List(1)

scala> val result = if (input.isEmpty) sys.error("empty input") else input
result: List[Int] = List(1)
----

* 내장 언어 구조이지만, 인수가 셋인 함수로 생각
* 첫째 인수는 Boolean 조건 표현식
* 둘째 인수는 조건이 true 이면 A 형식의 값을 돌려주는 표현식
* 셋째 인수는 조건이 false 이면 A 형식의 값을 돌려주는 표현식
* 정확히는 if 는 조건 매개변수에 대해서는 엄격
* 두 분기중 어떤 것을 취할지 결정하려면 조건을 반드시 평가
* 그러나 true, false 두 분기에 대해서는 엄격하지 않음(둘중 하나만 평가)

.비엄격 if 함수
----
scala> def if2[A](cond: Boolean, onTrue: () => A, onFalse: () => A): A =
  if (cond) onTrue() else onFalse()

scala> if2(1 < 2,
     |   () => println("a"),
     |   () => println("b")
     | )
a
----

* () => A 인수를 받지 않고 A를 돌려주는 함수
* 성크(thunk)
* onTrue(), onFalse() 처럼 평가를 강제할 수 있음
* 스칼라는 더 깔끔한 구문을 제공

.더 깔끔한 비엄격 if 함수
----
def if2[A](cond: Boolean, onTrue: => A, onFalse: => A): A =
  if (cond) onTrue else onFalse
----

* 스칼라는 인수 평가의 결과를 캐싱하지 않음(기본적으로는)

.참도될 때마다 평가
----
scala> def maybeTwice(b: Boolean, i: => Int) = if (b) i+i else 0
maybeTwice: (b: Boolean, i: => Int)Int

scala> val x = maybeTwice(true, { println("hi"); 1+41})
hi
hi
x: Int = 84
----

* i는 maybeTwice 본문 안에서 두 번 참조
* 'hi'를 출력해서 **참조될 때마다 평가**되는걸 명시적으로 보여줌
* 캐싱을 적용해서 단 한번만 평가되게 하려면 **lazy** 키워드를 이용

.lazy를 이용한 캐싱
----
scala> def maybeTwice(b: Boolean, i: => Int) = {
     |   lazy val j = i
     |   if (b) j+j else 0
     | }
maybeTwice: (b: Boolean, i: => Int)Int

scala> val x = maybeTwice(true, { println("hi"); 1+41})
hi
x: Int = 84
----

* lazy val 우변이 처음 참조될 때까지 평가 지연
* 평가 결과를 캐시에 담고 평가를 되풀이 하지 않음
* 비엄격 함수의 인수는 값으로(by value) 전달이 아니고 이름으로(by name) 전달

== 5.2 확장 예제: 게으른 목록

* 함수적 프로그램의 효율성과 모듈성을 lazy list 또는 stream 으로 개선

[source,scala]
.목록5.2 stream의 간단한 정의
----
sealed trait Stream[+A]
case object Empty extends Stream[Nothing]
case class Cons[+A](h: => A, t: => Stream[A]) extends Stream[A] <1>

object Stream {
  def cons[A](hd: => A, tl: => Stream[A]): Stream[A] = { <2>
    lazy val head = hd <3>
    lazy val tail = tl <3>
    Cons(() => head, () => tail)
  }

  def empty[A]: Stream[A] = Empty <4>

  def apply[A](as: A*): Stream[A] = <5>
    if (as.isEmpty) empty else cons(as.head, apply(as.tail: _*))
}
----
<1> 기술적인 한계로 이름으로 전달하는 인수가 아니라 명시적으로 강제해야 하는 성크
<2> 비지 않은 스트림의 생성을 위한 똑똑한 생성자
<3> 평가반복을 피하기 위한 캐싱
<4> 빈 스트림 생성을 위한 똑똑한 생성자
<5> Stream 생성을 위한 가변 인수 메서드

.headOption
----
def headOption: Option[A] = this match {
  case Empty = None
  case Cons(h, t) => Some(h()) <1>
}
----
<1> h() 를 이용해서 명시적으로 강제

=== 5.2.1 스트림의 메모화를 통한 재계산 피하기

* Cons 노드가 평가되면 값을 캐싱해 두는 것이 바람직

.expensive(x)가 두 번 계산
----
val x = Cons(() => expensive(x), tl)
val h1 = x.headOption
val h2 = x.headOption
----

* 위 문제는 실제 생성자와 다른 서명의 똑똑한 생성자를 이용해서 회피
* 첫 글자를 소문자로 바꿔서 사용하는 것이 관례(예, Cons 경우 cons)

[source,scala]
.똑똑한 생성자 역할의 cons 메서드
----
def cons[A](hd: => A, tl => Stream[A]): Stream[A] = { <1>
 lazy val head = hd <2>
 lazy val tail = tl <2>
 Cons(() => head, () => tail)
}
----
<1> 이름으로 전달
<2> 메모화(memoization)를 수행

[source,scala]
.Stream.apply
----
def apply[A](as: A*): Stream[A] =
  if (as.isEmpty) empty
  else cons(as.head, apply(as.tail: _*)) <1>
----
<1> cons 안에서 성크로 감싸는 작업은 스칼라가 처리

=== 5.2.2 스트림의 조사를 위한 보조 함수들

[source,scala]
.5.1 toList
----
def toList: List[A] = {
  @annotation.tailrec
  def go(s: Stream[A], acc: List[A]): List[A] = s match {
    case Cons(h,t) => go(t(), h() :: acc)
    case _ => acc
  }
  go(this, List()).reverse
}

def toListFast: List[A] = {
  val buf = new collection.mutable.ListBuffer[A]
  @annotation.tailrec
  def go(s: Stream[A]): List[A] = s match {
    case Cons(h,t) =>
      buf += h()
      go(t())
    case _ => buf.toList
  }
  go(this)
}
----

[source,scala]
.5.2 take, drop
----
def take(n: Int): Stream[A] = this match {
  case Cons(h, t) if n > 1 => cons(h(), t().take(n-1))
  case Cons(h, _) if n == 1 => cons(h(), empty)
  case _ => empty
}

def drop(n: Int): Stream[A] = this match {
  case Cons(_, t) if n > 0 => t().drop(n - 1)
  case _ => this
}
----

[source,scala]
.5.3 takeWhile
----
def takeWhile(p: A => Boolean): Stream[A] = this match {
  case Cons(h, t) if p(h()) => cons(h(), t().takeWhile(p))
  case _ => empty
}
----

## 5.3 프로그램 서술과 평가의 분리 (Separating program description from evaluation)

* 관심사의 분리(separation of concerns)
: 이 책에서는 계산의 서술(description)을 그 계산의 실제 실행과 분리하는 것을 이야기함.

- examples
> 일급 함수는 일부 계산을 자신의 본문에 담고 있으나, 그 계산은 오직 인수들이 전달되어야 실행된다.
> Option은 오류가 발생했다는 사실을 담고 있을 뿐, 오류에 대해 무엇을 수행할 것인가는 그와는 분리된 관심사.
> Stream을 이용하면 요소들의 순차령릉 생성하는 계산을 구축하되 계산 단계들의 실행은 실제로 요소가 필요할 때 까지 미룰 수 있다.

나태성(laziness)을 통해서 표현식의 서술을 그 표현식의 평가와 분리.

```scala
def exists(p: A => Boolean): Boolean = this match {
  case Cons(h, t) => p(h()) || t().exists(p)
  case _ => false
}
```

두번째 줄의 `||`는 두번째 인수에 대해 엄격하지 않음. p(h())가 true를 리턴하는 경우 t().exists(p)는 연산하지 않고 true를 리턴.
stream의 tail이 lazy val 이므로 Stream의 traversal이 일찍 종료될 뿐 아니라 tail의 평가는 수행되지 않는다.

```scala
// 인수 형식 B 앞의 화살표 => 는 함수 f가 그 인수(둘째 인수)를 이름으로 받으며,
// 경우에 따라서는 그것을 평가하지 않을 수 있다는 뜻이다.
def foldRight[B](z: => B)(f: (A, => B) => B): B = this match {
  // 만일 f가 둘째 인수를 평가하지 않으면 재귀는 결코 일어나지 않는다.
  case Cons(h, t) => f(h(), t().foldRight(z)(f))
  case _ => z
}
```

결합 함수 f가 두번째 매개변수에 대해 엄격하지 않다(non-strictness).


```
// foldRight로 exists 구현
def exists(p: A => Boolean): Boolean =
  foldRight(false)((a, b) => p(a) || b)
```

여기서 b는 평가되지 않을 수 있음. (a가 true를 리턴할 경우.)
이러한 함수들을 엄격하게 작성할 경우, 조기종료를 처리하는 코드를 작성해야 함.
laziness를 통해 코드 재사용성 향상.



* 목록 5.3 stream에 대한 프로그램 추적

```
Stream(1, 2, 3, 4).map(_ + 10).filter(_ % 2 == 0).toList
```

stream의 elements에 대해, map과 filter 계산이 번갈아 수행됨.
변환 논리를 엇갈려 수행(interleave)
map에서 비롯된 중간 스트림이 완전하게 인스턴스화되지는 않음.

중간 스트림들이 인스턴스화 되지 않음.

```
// 주어진 술어를 만족하는 첫 요소를 돌려주는 find.
// filter를 재사용해서 구현.
def find(p: A => Boolean): Option[A] =
  filter(p).headOption
```

filter가 전체 스트림을 변환하긴 하나 그 변환은 게으르게 일어나므로, find는 부합하는 요소를 발견하는 즉시 종료.


* 스트림 변환(stream transformations)의 점진적 본성(incremental nature)의 메모리 사용 영향.
위 목록 5.3과 같은 예에서 garbage collector는 map이 산출한 11, 13에 대해 filter가 그 값이 필요하지 않다고 결정한 즉시 수거가 가능하다.
객체가 더 큰 경우에, 이러한 메모리를 일찍 reclaim할 수 있다면 전체적인 메모리 사용량을 줄일 수 있다.

## 5.4. INFINITE STREAMS AND CORECURSION

````scala
val ones: Stream[Int] = Stream.cons(1, ones)
````

ones가 무한이라도 위에서 만든 take나 exists 함수들은 스트림의 일부만 살펴볼수 있다

```scala
ones.take(5).toList
```

```scala
ones.exists(_ % 2 != 0)
```

image::https://www.safaribooksonline.com/library/view/functional-programming-in/9781617290657/074fig01_alt.jpg[stream image]

Exercise 5.8
```scala
  def constant[A](a: A): Stream[A]
```
Exercise 5.9
```scala
def from(n: Int): Stream[Int]
```

Exercise 5.10

image::https://wikimedia.org/api/rest_v1/media/math/render/svg/00008893a71eebbf4e7d89a0c162fe6359f5ac8c[피보나치수]

Exercise 5.11

```scala
def unfold[A, S](z: S)(f: S => Option[(A, S)]): Stream[A]
```

Option은 Stream이 종료되는 시점에 쓰의고 unfold는 Stream을 생성할때 일반적으로 사용
unfold는 공재귀 corecursive 이다

재귀가 자료를 소비하면 공재귀는 자료를 생산한다

Corecursion is also sometimes called guarded recursion, and productivity is also sometimes called 공종료(cotermination)
