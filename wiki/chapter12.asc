=== 12.4 적용성 함수의 장점

Applicative 인터페이스가 중요한 이유

* 최소한의 가정만으로 traverse 같은 조합기를 구현하는 것이 바람직하다. 자료 형식이 flatMap보다는 map2를 구현할 수 있다고 가정하는 것이 낫다.
* Applicative는 Monad보다 "약하기" 때문에, 적용성 효과의 해석기가 더 유연해진다. 한 예로 파싱을 생각해보자. 만일 flatMap을 사용하지 않고 파서를 정의할 수 있다면, 이는 파싱하고자 하는 문법의 구조가 파싱을 시작하기 전에 이미 결정되어 있음을 뜻한다.
* 적용성 함수자들은 합성되지만 모나드는(일반적으로) 그렇지 않다.

=== 12.4.1 모든 적용성 함수자가 모나드는 아니다

==== 적용성 스트림

스트림은 map2와 unit은 정의할 수 있지만 flatMap은 정의할 수 없다.

==== 유효성 점검: 오류를 누적하는 Either 변종

웹 페이지를 통해 양식의 유효성을 점검하는 문제를 생각해보자. 첫 오류만 보고한다면 사용자는 양식의 오류를 한번에 하나씩 고치는 과정을 되풀이해야 한다. Either를 모나드적으로 사용한다면 이런 상황이 발생한다.

[source,scala]
----
validName(field1) flatMap (f1 =>
validBirthdate(field2) flatMap( f2 =>
validPhone(field3) map( f3 => WebForm(f1, f2, f3))
----

validName이 실패해서 오류를 반환하면 validBirthdate와 validPhone은 실행되지 않음

map3을 이용하면

[source,scala]
----
map3(
	validName(field1),
	validBirthdate(field2),
	validPhone(field3))(
		WebForm(_,_,_))
----

