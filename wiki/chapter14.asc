== 14.2 부수 효과를 지역 범위로 한정하는 자료 형식

순수 함수라도 지역 범위의 자료에 관해서는 부소 효과를 가질 수 있음을 살펴보았다.

부수 효과의 범위 적용을 이런식으로 느슨하게 추론하는 것이 잘못된 일은 아니지만, 때에 따라서는 스칼라의 형식 시스템을 이용해서 효과의 범위를 갖게하는 것이 바람직할 수도 있다.

=== 14.2.1 범위 있는 변이를 위한 작은 언어

기존의 State[S,A] 모나드로 상태를 쓰고 읽는 것은 가능하다. 그렇지만 지금의 케이스에는 적합하지 않다.
=> State 모나드는 s => (A, S)이기 때문이며, 우리는 상태를 제자리에서 변이하는 것.

넘겨줄 것은 S 형식으로 표시된 일종의 토큰이며, 이런 토큰과 함께 호출된 함수는 같은 형식 S로 표시된 자료를 변이할 '권한'을 가지며, 아래 2가지를 보장하고, 이를 어기면 컴파일되지 않아야 한다

* 함수 안에 변이 가능 객체에 대한 참조가 있다고 할 때, 함수 외부에서는 그 참조에 대한 변이를 전혀 관측할 수 없다.
* 변이 가능 객체는 그것이 생성된 범위 밖에서는 전혀 관측할 수 없다.

새로운 ST 자료형식 : state thread, state transition, stage tag

[source,scala]
----
sealed trait ST[S, A] { self =>
  protected def run(s: S): (A, S)
  def map[B](f: A => B): ST[A, B] = new ST[S, B] {
    def run(s: S) = {
      val (a, s1) = self.run(s)
      (f(a), s1)
    }
    def flatMap[B](f: A => ST[S, B]): ST[S, B] = new ST[S, B] {
      def run(s: S) = {
        val (a, s1) = self.run(s)
        f(a).run(s1)
      }
    }
  }
}
object ST {
  def apply[S,A](a: => A) = {
    lazy val memo = a
    new ST[S,A] {
      def run(s: S) = (memo, s)
    }
  }
}
----

* ST 구현의 모든 세부사항을 이해할 필요는 없다. 중요한 것은, 형식 시스템을 이용해서 변이 가능 상태의 범위를 한정할 수 있다는 점이다.

=== 14.2.2 변이 가능한 참조의 대수

변이 가능 메모리 칸들을 언급하는 언어는 반드시 다음과 같은 기본 명령들을 갖추어야 한다.

* 새 변이 가능 칸을 할당하는 명령
* 변이 가능 칸에 값을 쓰는 명령
* 변이 가능 칸을 읽는 명령

[source,scala]
----
sealed trait STRef[S, A] {
  protected var cell: A
  def read: ST[S, A] = ST(cell)
  def write(a: A): ST[S, Unit] = new ST[S, Unit] {
    def run(s: S) = {
      cell = a
      ((), s)
    }
  }
}

object STRef {
  def apply[S, A](a: A): ST[S, STRef[S, A]] = ST(new STRef[S, A] {
      val cell = a
    })
}
----

* 순수 함수
* 형식 S가 변이 되는 칸의 형식이 아님
* S 형식의 값을 실제로 사용하는 일이 전혀 없음

=> STRef를 생성하는 방법은 apply를 호출하는 것 뿐이지만, STRef를 생성하지 않고 ST[S, STRef[S,A]]를 반환

예제 : run이 protected이기 때문에 실행할 수 없음

[source,scala]
----
for {
  r1 <- STRef[Nothing,Int](1)
  r2 <- STRef[Nothing,Int](1)
  x <- r1.read
  y <- r2.read
  _ <- r1.write(y+1)
  _ <- r2.write(x+1)
  a <- r1.read
  b <- r2.read
} yield (a, b)
----

=== 14.2.3 변이 가능 상태 동작의 실행

우리의 목적

1. 실행 했을 때 어떤 지역 변이 가능 상태를 할당
2. 그것을 변이해서 어떤 과제를 수행
3. 그 변이 가능 상태를 폐기

얻을 수 있는 것

* 전체 계산이 참조 투명 => 변이 가능 상태가 private

그러나 우리가 원하는 것

* 지역 범위 한정을 보장받는 것 (; STRef가 var를 담고 있을 때 ST 바깥으로 추출 불가 하도록)
  * => STRef가 외부로 유출되면 변이 가능 참조가 생겨 전체적으로 참조 투명성이 무너진다

ST 동작을 안전하게 실행하는 방법

1. 안전하게 실행할 수 있는 동작과 그렇지 않은 동작을 구분
  * ST[S, STRef[S, Int]] (안전하게 실행할 수 없음)
  * ST[S, Int] (완전히 안전하게 실행할 수 있음)
2. ST[S, STRef[S, A]] 형식의 동작은 실행을 금지
  * 이런 동작을 실행하면 STRef[S, A]가 노출됨

실행하기에 안전한 ST 동작들, 다시 말해 S에 대해 다형적인 동작들을 대표하는 새 특질을 도입하자.

[source,scala]
----
trait RunnableST[A] {
  def apply[S]: ST[S,A]
}
----

[source,scala]
----
val p = new RunnableST[(Int, Int)] {
  def apply[S] = for {
    r1 <- STRef(1)
    r2 <- STRef(2)
    x <- r1.read
    y <- r2.read
    _ <- r1.write(y+1)
    _ <- r2.write(x+1)
    a <- r1.read
    b <- r2.read
  } yield (a, b)
}
----

이제 비로소 runST함수를 작성할 준비가 끝났다. RunnableST 동작은 S에 대해 다형적이므로, 전달된 값이 전혀 쓰이지 않는 다는 점이 보장된다. 따라서 Unit 형식의 값인 ()를 전달하는 것도 사실상 완벽하게 안전하다!


[source,scala]
----
object ST{
  def apply[S, A](a: => A) = {
    lazy val memo = a
    new ST[S, A] {
      def run(s: S) = (memo, s)
    }
  }
  def runST[A](st: RunnableST[A]): A =
    st.apply[Unit].run(())._1
}
----

이제 앞에서 보았던 간단한 프로그램 p를 실행할 수 있다.

[source,scala]
----
scala> val p = new RunnableST[(Int, Int)] {
      | def apply[S] = for {
      |   r1 <- STRef(1)
      |   r2 <- STRef(2)
      |   x <- r1.read
      |   y <- r2.read
      |   _ <- r1.write(y+1)
      |   _ <- r2.write(x+1)
      |   a <- r1.read
      |   b <- r2.read
      |   } yield (a, b)
      | }
p: RunnableST[(Int, Int)] = $anon$1@e3a7d65

scala val r = ST.runST(p)
r: (Int, Int) = (3, 2)
----


=== 14.2.4 변이 가능 배열

변이 가능 참조는 그 자체로는 그리 유용하지 않다. ST 모나드에 대해 훨씬 더 유용하게 사용할 수 있는 것은 변이 가능 배열이다.

[source,scala]
----
sealed abstract class STArray[S, A](implicit manifest: Manifest[A]) { <1>
  protected def value: Array[A]
  def size: ST[S, Int] = ST(value.size)

  def write(i: Int, a: A): ST[S, Unit] = new ST[S, Unit] { <2>
    def run(s: S) = {
      value(i) = a
      ((), s)
    }
  }

  def read(i: Int): ST[S,A] = ST(value(i)) <3>

  def freeze: ST[S, List[A]] = ST(value.toList) <4>

  object STArray{
    def apply[S, A:Manifest](sz: Int, v: A): ST[S, STArray[S,A]] = <5>
      ST(new STArray[S,A] {
        lazy val value = Array,fill(sz)(v)
      })
  }
}
----
<1> 스칼라에서 배열을 생성하려면 암묵적 매니페스트가 필요하다
<2> 주어진 색인에 해당하는 배열 원소에 값을 기록한다.
<3> 주어진 색인에 해당하는 배열 원소의 값을 읽는다.
<4> 배열을 불변이 목록으로 바꾼다.
<5> 주어진 배열의 크기의 배열을 생성해서 값 v를 채운다.

> https://github.com/fpinscala/fpinscala/blob/master/answers/src/main/scala/fpinscala/localeffects/LocalEffects.scala#L101[연습문제 14.1] Map의 요소들을 배열에 채우는 조합기는 STArray에 추가하라. Map의 키는 배열의 색인이고 값은 그 색인에 해당하는 배열 요소에 기록할 값이다. 예를 들어 xs.fill(Map(0->"a",2->"b"))를 실행하면 배열 xs의 색인 0에는 값 "a"가, 색인 2에는 "b"가 기록되어야 한다. 그러한 조합기 fill을 기존의 조합기들을 이용해서 구현하다

> def fill(xs: Map[Int, A]): ST[S, Unit]

== 14.2.5 순수 함수적 제자리 quicksort

이제는 quicksort의 구성요소들을 ST로 손쉽게 작성할 수 있다. swap 함수는 다음과 같이 구현할 수 있다.

[source,scala]
----
def swap[S](i: Int, j: Int) ST[S, Unit] = for {
  x <- read(i)
  y <- read(j)
  _ <- write(i, y)
  _ <- write(j, x)
} yield()
----

> https://github.com/fpinscala/fpinscala/blob/master/answers/src/main/scala/fpinscala/localeffects/LocalEffects.scala#L130[연습문제 14.2] partition과 qs의 순수 함수 버전을 작성하라.


[source,scala]
----
def quicksort(xs: List[Int]): List[Int] =
  if(xs.isEmpty) xs else ST.runST(new RunnableST[List[Int]]) {
    def apply[S] = for {
      arr <- STArray.fromList(xs)
      size <- arr.size
      _ <- qs(arr, 0, size - 1)
      sorted <- arr.freeze
    } yield sorted
  }
----
