== 8.4 라이브러의 사용과 사용성 개선

라이브러리를 계속 정련할 수도 있겠지만, 라이브러리를 실제 사용해서 검사들을 구축해보자. 그러면 라이브러리로 표현할 수 있는 것이나 전체적인 사용성에서 뭔가 부족한 점을 발견할 수 있을 것이다.

사용성(usability)에 대한 평가는 다소 주관적이지만, 대체로 보았을 때 편리한 구문과 공통의 사용 패턴에 적합한 보조 함수들이 라이브러리에 갖추어져 있다면 사용성이 좋다고 할 수 있다.

지금 시점에서 라이브러리의 표현력을 높이는 것을 목표로 삼을 필요는 없다. 그러나 라이브러리를 좀 더 사용하기 좋게 만드는 것은 필요하다.

=== 8.4.1 간단한 예제 몇 가지

List의 메서드로 존재하는 함수 max의 행동 방식을 명시하는 문제를 다시 살펴보자.

[source,scala]
----
val smallInt = Gen.choose(-10, 10)
val maxProp = forAll(listOf(smallInt)) { ns =>
	val max = ns.max
	!ns.exists(_ > max) <1>
----
<1> ns에 max보다 큰 값이 존재해서는 안된다.

그런데 현재의 API에서 Prop에 run을 직접 실행하는 것은 다소 번거롭다. Prop 값들을 실행하고 그 결과를 유용한 형식으로 콘솔에 출력해 주는 보조 함수를 도입하면 좋을 것이다.

[source,scala]
----
def run(p: Prop,
	maxSize: Int = 100,
	testCases: Int = 100,
	rng: RNG = RNG.Simple(System.currentTimeMillis)): Unit =
	  p.run(maxSize, testCases, rng) match {
	    case Falsified(msg, n) =>
	      println(s"! Falsified after $n passed tests:\n $msg)
	    case Passed =>
	      println(s"+ OK, passed $testCases tests.")
	}
----

이 구현은 스칼라의 기본 인수 기능을 활용한다.(; var: type = 100 ) +

run(maxProp)를 실행하면 속성이 실패했다는 결과를 볼 수 있다. 속성 기반 검사는 코드에 숨어 있는 가정을 드러내는 한 방법이다. 결과적으로 프로그래머는 그러한 가정들을 좀 더 명시적으로 코드에 지정하게 된다. 표준 라이브러리의 max 구현은 빈 목록이 주어지면 폭주한다. 이 점을 고려해서 속성을 고칠 필요가 있다.

> 연습문제 8.13
> 빈 목록을 생성하는 listOf1를 정의하고, 이 생성기를 사용하도록 독자의 max의 명세를 갱신하라.

> 연습문제 8.14
> List.sorted의 행동 방식을 검증하는 속성을 하나 작성하라. 이 함수는 이를테면 List[Int](또는 그 외의 여러 가지 것)를 정렬하는데 사용할 수 있다. 예를 들어 List(2,1,3).sorted는 List(1,2,3)과 같다.

=== 8.4.2 병렬 계산을 위한 검사 모음 작성

제 7장에서 병렬 계산에 대해 반드시 성립해야 하는 법칙들을 밝혀냈었다. 그런 법칙들을 이 검사 라이브러리로 표현할 수 있을까? 제7장에서 살펴본 첫 '법칙'은 사실 특정한 검례였다.

[source,scala]
----
map(unit(1))(_ + 1) == unit(2)
----

이를 표현하는 것은 물론 가능하지만, 아주 깔끔하게 표현하지는 못한다.

[source,scala]
----
val ES: ExecutorService = Executors.newCachedThreadPool
val p1 = Prop.forAll(Gen.unit(Par.unit(1)))(i =>
  Par.map(i)(_ + 1)(ES).get == Par.unit(2)(ES).get
----

법칙을 검례로 표현하긴 했지만 다소 장화하고 지저분하며, 검례에 깔린 착안이 그리 중요하지 않은 세부사항들에 가려져 있다. 이것이 API의 표현력의 부재 문제는 아님을 주의하기 바란다. 우리가 원하는 것을 표현할 수는 있다. 그러나 몇 가지 누락된 보조 함수들과 지저분한 구문의 조합 때문에 의도가 명확히 드러나지 못한 것일 뿐이다.

==== 속성의 증명

이를 개선해보자. 우선 주목할 점은, 이 검례에 대해서는 forAll이 다소 과하게 일반적이라는 것이다. 이 검사에서는 입력이 가변적이지 않다. 그냥 구체적인 수치가 코드 자체에 박혀 있다. 이런 하드 코딩 검례는 전통적인 단위 검사(unit testing) 라이브러리를 사용할 때만큼이나 간단하게 작성할 수 있어야 한다. 그럼 이를 위한 조합기를 하나 도입해 보자(Prop 동반 객체의 메서드를 추가).

[source,scala]
----
def check(p: => Boolean): Prop
----

[source,scala]
----
def check(p: => Boolean): Prop = { <1>
  lazy val result = p <2>
  forAll(unit(()))(_ => result)
}
----
<1> 비엄격 함수임을 주목
<2> 재계산을 피하기 위해 결과를 메모화한다.

그런데 그리 흡족하지 않다. 이 구현은 단위 생성기를 이용해서 값을 하나만 생성하는데, 이는 단지 주어진 Boolean을 평가하기 위한 것일 뿐이다. 생성된 값 자체는 쓰이지 않고 무시된다.
결과가 단 한번만 평가되도록 메모화한다고 해도 검사 실행기는 여전히 여러 개의 검례를 생성해서 Boolean을 여러번 점검한다. 예를 들어 run(check(true))라고 호출하면 검사 실행기는 그 속성을 100번 검사해서 "OK, passed 100 tests"를 출력한다. 그런데 항상 true인 속성을 100번 점검하는 것은 심한 헛수고이다. 이 문제는 새로운 기본수단을 도입해야 해결된다.

검례 개수를 무시하는 Prop를 구축하는 check라는 기본 수단을 새로 만들어보자.

[source,scala]
----
def check(p: => Boolean): Prop = Prop {(_, _, _) =>
	if(p) Passed else Falsified("()", 0)
}
----

forAll을 사용하는 것보다 이것을 사용하는 것이 확실히 낫다. 그러나, run(check(true))가 속성을 한 번만 검사하지만 그 출력은 여전히 "OK, passed 1000 tests."라는 문제점이 남아 있다. 이 속성은 다수의 검사에서 반례가 발견되지 않아서 검사를 "통과(pass)"한 것이 아니다. 그냥 한 번의 검사에 의해 증명된 것이다. 따라서 다음과 같은 새로운 종류의 Result를 도입할 필요가 있겠다.

[source,scala]
----
case object Proved extends Result
----

이제 check가 생성한 속성이 Passed 대신 Proved를 돌려주게 하면 된다.

[source,scala]
----
def run(p: Prop,
	maxSize: Int = 100,
	testCases: Int = 100,
	rng: RNG = RNG.Simple(System.currentTimeMillis)): Unit =
		p.run(maxSize, testCases, rng) match {
		  case Falsified((msg, n)) =>
		    println(s"! Falsified after $n passed tests:\n $msg)
		  case Passed =>
		    println(s"+ OK, passed $testCases tests.")
		  case Proved =>
		    println(s"+ OK, proved property.")
	}
----

> 연습문제 8.15

==== Par의 검사

Par.map(Par.unit(1))(_ + 1 )이 Par.unit(2)와 같다는 증명으로 돌아가자. 새 Prop.check 기본 수단을 이용하면 의도가 묻히지 않는 방식으로 이를 표현할 수 있다.

[source,scala]
----
val p2 = Prop.check {
	val p = Par.map(Par.unit(1))(_ + 1)
	val p2 = Par.unit(2)
	p(ES).get == p2(ES).get
}
----

p(ES).get과 p2(ES).get이 눈에 거슬린다. 두 Par 값이 같은지 비교하려고 한 것뿐인데 Par의 내부 구현 세부사항이 드러나 버렸다.

map2를 이용해서 Par로 승급시키자.

[source,scala]
----
def equal[A](p: Par[A], p2: Par[A]): Par[Boolean] =
	Par.map2(p, p2)(_ == _)

def p3 = check {
	equal(
		Par.map(Par.unit(1)(_ + 1)),
		Par.unit(2)
		)(ES).get
}
----

양변을 개별적으로 실행하는 것에 비하면 나아졌다. 더 나아가서, Par의 실행을 개별 함수 forAllPar로 옮기면 어떨까? 그런 함수는 명시하고자 하는 속성을 지저분하게 만들지 않고도 다양한 병렬 전략들을 끼워 넣기에 적합한 장소도 제공한다.

[source,scala]
----
val S = weighted( <1>
	choose(1, 4).map(Executors.newFixedThreadPool) -> .75,
		unit(Executors.newCachedThreadPool) -> .25) <2>

def forAllPar[A](g: Gen[A])(f: A => Par[Boolean]): Prop =
	forAll(S.map2(g)((_,_))) { case (s,a) => f(a)(s).get }
----
<1> 이 생성기는 75%는 고정 크기 스레드 풀, 25%는 크기가 정해지지 않은 스레드 풀을 생성한다.
<2> a -> b는 (a, b)에 대한 syntactic sugar

그런데 S.map2(g)((_,_))라는 구문에는 출력들의 쌍을 생성하기 위해 두 생성기를 조합한다는 의도에 비해 잡음이 많은 편이다. 그럼 이를 좀 더 간결하게 표현할 수 있는 새 조합기를 도입하자.

[source,scala]
----
def **[B](g: Gen[B]): Gen[(A,B)] =
	(this map2 g)((_,_))
----

이제 코드를 훨씬 깔끔하게 만들 수 있다.

[source,scala]
----
def forAllPar[A](g: Gen(A)(f: A => Par[Boolean]): Prop =
	forAll(S ** g) { case (s,a) => f(a)(s).get }
----

**를 커스텀 추출기를 이용하는 패턴으로 사용할 수도 있다. 그러면 이런 코드가 가능해진다.

[source,scala]
----
def forAllPar[A](g: Gen(A)(f: A => Par[Boolean]): Prop =
	forAll(S ** g) { case s ** a => f(a)(s).get }
----

이 구문은 여러 생성기를 튜플로 엮을 때 잘 동작한다. 튜플 패턴을 직접 사용할 때와는 달리, 패턴 부합 구문에서 괄호들을 중첩시킬 필요가 없다. +++**+++를 패턴으로 사용할 수 있도록, unapply 함수가 있는 +++**+++라는 이름의 객체를 정의하자.

[source,scala]
----
object ** {
	def unapply[A,B](p: (A,B)) = Some(p)
}
----

사소한 변화 같지만, 이런 종류의 팩토링과 정리는 라이브러리의 사용성을 크게 높일 수 있다.

그럼 제7장의 다른 몇몇 속성도 살펴보자. 다음과 같이 일반화한 검례를 기억할 것이다.

[source,scala]
----
map(unit(x))(f) == unit(f(x))
----

그런 다음에는 이를, 어떤 계산에 항등 함수를 적용하는 것은 아무런 효과도 없음을 뜻하는 법칙으로 단순화했었다.

[source,scala]
----
map(y)(x => x) == y
----

이 속성을 표현할 수 있을까? 꼭 그렇지는 않다. 이 속성은 임의의 형식의 모든 y에 대해 상승이 성립함을 암묵적으로 명시한다. 그러나 속성의 표현에서는 특정한 y값들을 지정해야 한다.

[source,scala]
----
val pint = Gen.choose(0, 10) map (Par.unit(_))
val p4 = forAllPar(pint)(n => equal(Par.map(n)(y => y), n))
----

더 많은 y들을 지정할 수는 있지만, 그냥 이 정도로도 충분할 것이다. 병렬 계산의 값들은 map의 작동 방식에 영향을 미치지 않으므로, Double, String등에 대해 동일한 검사를 구축하는 것은 별 의미가 없다. map에 실제로 영향을 미치는 것은 병렬 계산의 구조이다. 속성이 성립함을 좀 더 확신하고 싶다면, 그 구조에 더 풍부한 생성기를 제공하면 된다. 지금 에에서는 한 수준으로만 중첩된 Par표현식만 제공했다.

> 연습문제 8.16
> 어려움 : Par[Int]를 위한 더 풍부한 생성기를 작성하라. 그 생성기는 앞에서 제공한 간단한 병렬 계산보다는 훨씬 깊게 중첩된 병렬 계산들을 구축해야 한다.

> 연습문제 8.17
> 제 7장의 fork에 관한 법칙 fork(x) == x를 속성으로 표현하라.

=== 8.5 고차 함수의 검사와 향후 개선 방향

지금까지 표현력이 상당히 좋은 속성 기반 검사 라이브러리를 만들었다. 그런데 간과한 부분이 하나 있다. 현재의 라이브러리는 고차 함수를 검사하기에 적합한 수단을 제공하지 않는다. 생성기들을 이용해서 자료를 생성하는 수단은 갖추었지만, 함수를 생성하는 적당한 수단은 없다.

=== 8.6 생성기의 법칙들

지금까지 Gen 형식에 대해 구현한 함수 중에는 Par나 List, Stream, Option에 대해 정의한 다른 함수들과 상당히 비슷해 보이는 것들이 많다는 점에 주목한 독자가 있을 것이다.
한 예로, 이전에 Par에 대해 정의한 map과 이번 장에서 Gen에 대해 정의한 map은 매우 유사하다.

[source,scala]
----
def map[A,B](a: Par[A])(f: A => B): Par[B]

def map[B](f: A => B): Gen[B]
----

이들은 단지 서명만 비슷한 것일까, 아니면 실제로 어떤 동일한 법칙들을 만족하는 것일까? 예를 들어 제7장에서 Par에 대해 정의한 다음과 같은 법칙을 생각해 보자.

[source,scala]
----
map(x)(id) == x
----

이 법칙이 Gen.map의 구현에도 성립할까? Stream, List, Option, State는 어떨까? 실제로 모두 성립한다. 직접 확인해보기 바란다. 이 사실은 이 함수들이 단지 서명만 비스한 것이 아니라 각자의 영역에 관해 서로 비슷한 의미를 가지고 있음을 의미한다. 제3부에서 이런 패턴들의 이름을 배우고, 이들을 과장하는 법칙들을 밝혀내고, 이 모든 것이 어떤 의미인지 이해하게 될 것이다.
