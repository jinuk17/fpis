== Chapter6. 순수 함수적 상태

이번 장에서는 상태(state)를 다루는 순수 함수적 프로그램을 작성하는 방법을 살펴본다. +
예제는 난수 발생(random number generation) +
이번 장의 목표는 임의의 상태에 있는(stateful) API를 순수 함수적으로 만드는 데 쓰이는 기본 패턴들을 익히는 것이다. +

=== 6.1 부수 효과를 이용한 난수 발생

스칼라에서 난수를 발생할 때에는 scala.util.Random 클래스

이 클래스는 부수 효과에 의존하는 상당히 전형적인 명령식(imperative) API 를 제공

[source,scala]
----
scala> val rng = new scala.util.Random <1>

scala> rng.nextDouble
res1: Double = 0.9867076608154569

scala> rng.nextDouble
res2: Double = 0.8455696498024141

scala> rng.nextInt
res3: Int = -623297295

scala> rng.nextInt(10) <2>
res4: Int = 4
----
<1> 현재 시스템 시간을 종잣값(seed)으로 해서 새 난 수 생성기를 만든다.
<2> 0 이상 9 이하의 정수 난수를 얻는다.

scala.util.Random 매서드 호출 때마다 갱신되는 어떤 내부 상태가 존재한다고 가정할 수 있다.

상태 갱신은 부수 효과로서 수행되므로 이 메서드들은 참조에 투명하지 않다.

검사, 합성, 모듈화가 어렵고, 쉽게 병렬화할 수 없다.

검사성 시험의 예

[source,scala]
----
def rollDie: Int = {
  val rng = new scala.util.Random
  rng.nextInt(6) <1>
}
----
<1> 0 이상 5 이하의 난수를 돌려준다.

이 구현에는 off-by-one error가 있다. 구하고 싶은 수는 1 ~ 6인데 이 메서드는 0 ~ 5를 반환한다.
이 예제에서는 버그가 명백하고, 재현하기도 어렵지 않다. 그러나 메서드가 훨씬 복잡하고 버그가 훨씬 미묘한 상황도 얼마든지 상상할 수 있다.

한가지 해결책은 난수 발생기를 인수로 전달하게 하는 것이다.

[source,scala]
----
def rollDie(rng: scala.util.Random): Int = rng.nextInt(6)
----

그러나 이 해법에는 문제점이 있다. '동일한' 발생기는 종잣값과 기타 내부 상태가 동일해야 한다.
상태가 동일하다는 것은 발생기를 만든 후 그 메서드들이 원래의 발생기의 메서드 호출 횟수와 동일한 횟수로 호출되었음을 뜻한다.
이를 보장하기는 아주 어렵다.

결국 부수 효과를 피해야 한다.

=== 6.2 순수 함수적 난수 발생

참조 투명성을 되찾는 관건은 상태 갱신을 명시적으로 드러내는 것이다. 즉, 상태를 부수 효과로서 갱신하지 말고, 그냥 새 상태를 발생한 난수와 함께 돌려주면 된다.

[source,scala]
----
trait RNG {
  def nextInt: (Int, RNG)
}
----

발생한 난수와 함께 새 상태를 돌려주고 기존 상태는 수정하지 않는다.

이는 다음 상태를 계산하는 관심사와 새 상태를 프로그램 나머지 부분에 알려주는 관심사를 분리하는 것에 해당한다.

이 API의 사용자가 난수 발생기 자체의 구현에 대해서는 아무것도 모른다는 점에서, 상태는 여전히 발생기 안에 캡슐화되어 있음을 주목하기 바란다.

지금 부터 구현 할 것은 소위 선형 합동 발생기(linear congruential generator)에 해당한다.

[source,scala]
----
case class SimpleRNG(seed: Long) extends RNG {
  def nextInt: (Int, RNG) = {
    val nextSeed = (seed * 0x5DEECE66DL + 0xBL) & 0xFFFFFFFFFFFFL <1>
    val nextRNG = SimpleRNG(newSeed) <2>
    val n = (newSeed >>> 16).toInt <3>
    (n , nextRNG) <4>
  }
}
----
<1> 현재 종잣값을 이용해서 새 종잣값을 만든다.
<2> 다음 상태(새 종잣값으로 생성한 RNG 인스턴스)
<3> >>>는 빈자리를 0으로 채우는 이진 오른쪽 자리이동이다. 값 n은 새 의사난수 정수이다.
<4> 반환값은 의사난수 정수와 다음 발생기 상태를 담은 튜플이다.


[source,scala]
----
scala> val rng = SimpleRNG(42)
rng: SimpleRNG = SimpleRNG(42)

scala> val (r1, rng2) = rng.nextInt
n1: Int = 16159453
rng2: RNG = SimpleRNG(1059025964525)

scala> val (n2, rng3) = rng2.nextInt
n2: Int = -1281479697
rng3: RNG = SimpleRNG(197491923327988)
----

이 예를 여러 번 되풀이해서 실행해도 항상 같은 값들이 나온다.

== 6.3 상태 있는 API를 순수하게 만들기

==== 상태 있는 API를 순수하게 하는 방법

[source,scala]
----
class Foo {
    private var s: FooState = ...
    def bar: Bar
    def baz: Int
}
----

- 다음과 같은 bar와 baz 각각 s(상태)를 변경하는 클래스를 순수 함수적 API로 변환

[source,scala]
----
trait Foo {
    def bar: (Bar, Foo)
    def baz: (Int, Foo)
}
----
- API가 실제로 뭔가를 변경하는 대신 다음 상태를 계산해서 호출자에게 돌려줌
- 계산된 다음 상태를 프로그램의 나머지 부분에 전달하는 책임을 호출자에게 전달하는 것


[source,scala]
----
def randomPair(rng: RNG): (Int, Int) = {
    val (i1, _) = rng.nextInt
    val (i2, _) = rng.nextInt
    (i1, i2)
}
// i1과 i2는 같다.
----
CAUTION: 만일 이전의 상태를 재사용한다면 이전에 발생한 값과 같은 값을 생성한다.
[source,scala]
----
def randomPair(rng: RNG): ((Int, Int), RNG) = {
    val (i1, rng2) = rng.nextInt
    val (i2, rng3) = rng2.nextInt
    ((i1, i2), rng3)
}
----

`*_연습문제 6.1 ~ 6.4_*`

== 6.4 상태 동작을 위한 더 나은 API

- 공통 패턴: A에 대해 RNG => (A, RNG)
- state action(상태 동작), state transition(상태 전이): 상태를 다른 상태로 변환하는 종류의 함수
- combinator(조합기): state action(상태 동작)을 조합할 수 있는 함수

IMPORTANT: 상태를 호출자가 직접 전달하는 것은 지루하고 반복적이므로, 조합기가 자동으로 한 동작에서 다른 동작으로 상태를 넘겨주게 한다.

===== 상태 동작 자료 형식에 대한 별칭(alias)
[source,scala]
----
type Rand[+A] = RNG => (A, RNG)

val int: Rand[Int] = _.nextInt
// (rng) => rng.nextInt
----
IMPORTANT: Rand 동작들을 조합하되 RNG 상태들을 명시적으로 전달하지 않아도 되는 조합기를 작성하는 것이 가능

[source,scala]
----
//RNG를 사용하지 않고 그대로 전달하는 RGN 상태 전이
def unit[A](a: A): Rand[A] =
    rng => (a, rng)

//상태 동작의 출력을 변환하되 상태 자체는 수정하지 않는 map, 함수 합성
def map[A, B](s: Rand[A])(f: A => B): Rand[B] =
    rng => {
        val (a, rng2) = s(rng)
        (f(a), rng2)
    }

def nonNegativeEven: Rand[Int] =
    map(nonNegativeInt)(i => i - i % 2)
----

`*_연습문제 6.5_*`

=== 6.4.1 상태 동작들의 조합

- map이 앞의 intDouble, doubleInt를 구현할 정도로 강력하지는 않다(아마도 상태를 2번 사용해서??)

`*_연습문제 6.6_*`

이항함수로 조합하는 새로운 조합기 map2
[source,scala]
----
def map2[A, B, C](ra: Rand[A], rb: Rand[B])(f: (A, B) => C): Rand[C] = ???

def both[A, B](ra: Rand[A], rb: Rand[B]): Rand[(A, B)] =
  map2(ra, rb)((_, _))

val randIntDouble: Rand[(Int, Double)] =
  both(int, double)

val randDoubleInt: Rand[(Double, Int)] =
  both(double, int)
----

`*_연습문제 6.7_*`

=== 6.4.2 내포된 상태 동작
- map과 map2로는 작성할 수 없는 함수들 ...

0 이상 n 미만의 정수 난수를 발행하는 nonNegativeLessThan
[source,scala]
----
def nonNegativeLessThan(n: Int): Rand[Int] = ???

//전체적으로 난수가 치우칠 수도 있음.
def nonNegativeLessThan(n: Int): Rand[Int] =
    map(nonNegativeInt) { _ % n }

def nonNegativeLessThan(n: Int): Rand[Int] =
    map(nonNegativeInt) { i =>
        val mod = i % n
        if (i + (n-1) - mod >= 0) mod else nonNegativeLessThan(n)(???)
    }

def nonNegativeLessThan(n: Int): Rand[Int] = { rng =>
    val (i, rng2) = nonNegativeInt(rng)
    val mod = i % n
    if (i + (n-1) - mod >= 0)
        (mod, rng2)
    else nonNegativeLessThan(n)(rng2)
}
----

`*_연습문제 6.8 ~ 6.9_*`

[source,scala]
----
def rollDie: Rand[Int] = nonNegativeLessThan(6)
//상태 전이, 조합기를 통해 간단히 해결
def rollDie: Rand[Int] = map(nonNegativeLessThan(6))(_ + 1)
----
