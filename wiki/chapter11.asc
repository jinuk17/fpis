= Chapter11. 모나드

앞서 모노이드를 통해 동일한 법칙을 만족한다는 공통점을 가진 연산들로 유용한 인터페이스를 정의할 수 있다는 새로운 사고방식을 배울 수 있었다. 이번 장에서는 그러한 사고 방식을 계속 이어나가서 앞서 설계한 라이브러리에 존재하는 중복된 코드를 추출하는 문제에 적용해본다.

=>  새로운 추상 인터페이스 Functor와 Monad를 발견!

== 11.1 함수자: map함수의 일반화

다양한 조합기 라이브러리를 구현할 때마다 적은 수의 기본수단들을 작성하고, 오직 그 기본수단들만 이용해서 여러 조합기를 작성하는 식으로 진행했다. 그리고 서로 다른 라이브러리의 조합기들 사이에서 유사성을 발견할 수 있었다.

[source,scala]
----
def map[A,B](ga: Gen[A])(f: A => B): Gen[B]
def map[A,B](pa: Parser[A])(f: A => B): Parser[B]
def map[A,B](oa: Option[A])(f: A => B): Option[B]
----

* 변경되는 것은 "타입"뿐
* "map을 구현하는 자료 형식"으로 trait로 표현 가능

[source,scala]
----
trait Functor[F[_]]{
  def map[A,B](fa: F[A])(f: A => B): F[B]
}
----

위의 trait를 사용해서 List를 위한 Functor 인스턴스를 만들 수 있다.

[source,scala]
----
val listFunctor = new Functor[List]{
  def map[A,B](as: List[A])(f: A => B): List[B] = as map f
}
----

List(또는 Option, F)같은 형식 생성자를 가리켜 함수자(functor)라고 부른다. Functor[F] 인스턴스는 F가 실제로 하나의 함수자임을 증명하는 증거가 된다.

이러한 추상으로 할 수 있는 일이 무엇일까? 이 책에서 여러 번 보았듯이, 단지 인터페이스의 연산들을 순수하게 대수적인 방식으로 가지고 노는 것 만으로도 유용한 함수를 발견할 수 있다.

===== 1) unzip

[source,scala]
----
trait Functor[F[_]]{
  ...
  def distribute[A,B](fab: F[(A, B)]): (F[A], F[B]) =
    (map(fab)(_._1), map(fab)(_._2))
}
----

이 함수는 단지 형식들을 따라 작성한 것일 뿐이다. List[(A, B)]에 distribute를 적용하면 길이가 같은 목록 두개가 산출된다. 하나는 A로만 이루어진 목록이고 또 하나는 B로만 이루어진 목록이다. 이 연산을 unzip이라 부르기도 한다.

===== 2.codistribute

[source,scala]
----
def codistribute[A,B](e: Either[F[A], F[B]): F[Either[A, B]] =
  e match {
    case Left(fa) => map(fa)(Left(_))
    case Right(fb) => map(fb)(Right(_))
  }
----

A에 대한 생성기나 B에 대한 생성기가 있다면, 둘 중 어떤 것이 주어지느냐에 따라 A나 B중 하나를 생성하는 생성기를 만들 수 있다.

=== 11.1.1 함수자의 법칙들

Functor 같은 추상을 만들 때에는 어떤 추상 메서드들이 필요한지 고민할 뿐만 아니라 구현들이 지켜야 할 법칙(law)들도 고민해야 한다. 법칙을 지키는 것이 중요.

* 법칙은 인터페이스의 의미론(sementic)을, 해당 대수를 인스턴스들과는 독립적으로 추론할 수 있을 정도의 새로운 수준으로 끌어올리는 데 도움이 된다.
  * Monoid[A] * Monoid[B] = Monoid[(A,B)]
* Functor같은 추상 인터페이스의 함수들로부터 조합기들을 파생할 때 법칙들에 의존하는 경우가 많다.

> 법칙은 프로그래머가 결정하는 것일 뿐, 스칼라가 강제하지 않음.

===== '구조적 보존'

[source,scala]
----
map(x)(a => a) == x
----

자료구조 x에 항등 함수를 사상하는 것 자체가 하나의 항등 함수이어야 한다.

=> 이렇게 하려면 예외를 던지거나, List의 첫 요소를 제거, Some을 None으로 바꾸는 등의 행동을 해서는 안됨.

[source,scala]
----
def distribute[A,B](fab: F[(A, B)]): (F[A], F[B])
def codistribute[A,B](e: Either[F[A], F[B]): F[Either[A, B]]
----

=> 이런 종류의 대수적 추론은 속성마다 개별적인 검사를 작성할 필요가 없어서 프로그래머의 시간을 크게 절약해 줄 수 있다!

== 11.2 모나드: flatMap함수와 unit함수의 일반화

* Functor는 그리 매력적이지 않다
  * 순전히 map만으로 정의할 수 있는 유용한 연산이 별로 많지 않음

= Monad!

===== Gen과 Parser, Option에 대한 map2의 구현

[source,scala]
----
def map2[A,B,C](fa: Gen[A], fb: Gen[B])(f: (A,B) => C): Gen[C] =
  fa flatMap(a => fb map (b => f(a,b)))

def map2[A,B,C](fa: Parser[A], fb: Parser[B])(f: (A,B) => C): Parser[C] =
  fa flatMap(a => fb map (b => f(a,b)))

def map2[A,B,C](fa: Option[A], fb: Option[B])(f: (A,B) => C): Option[C] =
  fa flatMap(a => fb map (b => f(a,b)))
----

구현이 모두 동일 하다! 이 함수들은 공통점이 없어 보이는 서로 다른 자료 형식에 적용하지만...

=== 11.2.1 Monad 특질

Parser와 Gen, Par, Option등등 지금까지 살펴본 여러 자료 형식들을 하나로 묶는 공통점은 이들이 Monad라는 사실이다.

이 책의 제 2부에서는 개별 자료 형식들을 살펴보면서 유용한 조합기들을 많이 파생할 수 있는 최소한의 기본수단 연산들의 집합을 찾았다. 그와 비슷하게, 이번에는 추상 인터페이스를 최소한의 기본수단들의 집합으로 정련해 볼 것이다.

[source,scala]
----
trait Mon[F[_]]{
  def map2[A,B,C](fa: F[A], fb: F[B])(f: (A,B) => C): F[C] =
    fa flatMap(a => fb map (b => f(a,b)))
}
----

이 구현은 아직 컴파일되지 않는다. F에 대해 아무것도 알지 못하므로, F[A]에 대해 flatMap이나 map을 적용하는 방법을 모를 수 밖에 없다.

그런데 지금이라도 map과 flatMap을 추가하고 추상적인 상태로 남겨둘 수 있다.

[source,scala]
----
trait Mon[F[_]]{
  def map[A,B](fa: F[A])(f: A => B): F[B]
  def flatMap[A,B](fa: F[A])(f: A => F[B]): F[B]

  def map2[A,B,C](fa: F[A], fb: F[B])(f: (A,B) => C): F[C] =
    fa flatMap(a => fb map (b => f(a,b)))
}
----

현재 정의된 기본수단은 map과 flatMap이고, 이 둘로부터 map2를 파생할 수 있다. 그런데 flatMap과 map이 최소한의 기본수단일까? map2를 구현하는 자료 형식에는 항상 unit 함수가 있으며, 이전에 보앗듯이 map은 flatMap과 unit을 이용해서 구현할 수 있다.

[source,scala]
----
def map[A,B](f: A => B): Gen[B] =
  flatMap(a => unit(f(a)))
----

따라서 최소한의 기본수단 집합은 unit과 flatMap이어야 한다.

[source,scala]
----
trait Monad[F[_]] extends Functor[F] { <1>
  def unit[A](a: => A): F[A]
  def flatMap[A,B](ma: F[A])(f: A => F[B]): F[B]

  def map[A,B](ma: F[A])(f: A => B): F[B] =
    flatMap(ma)(a => unit(f(a)))

  def map2[A,B,C](ma: F[A], mb: F[B])(f: (A,B) => C): F[C] =
    flatMap(ma)(a => map(mb)(b => f(a,b)))
}
----
<1> Monad는 map의 기본 구현을 제공하므로 Functor를 확장할 수 있다. 모든 모나드는 함수자이나, 모든 함수자가 모나드인 것은 아니다.

이를 다시 구체적인 자료 형식과 연관시키는 한 예로, Gen을 위한 Monad인스턴스를 구현해보자.

[source,scala]
----
object Monad {
  val genMonad = new Monad[Gen] {
    def unit[A](a: => A): Gen[A] = Gen.unit(a)
    def flatMap[A,B](ma: Gen[A])(f: A => Gen[B]): Gen[B] =
      ma flatMap f
  }
}
----

unit과 flatMap만 구현하면 map과 map2는 저절로 생긴다. :)

> 연습문제 11.1

Par와 Parser, Option, Stream List에 대한 모나드 인스턴스를 각각 작성하라

> 연습문제 11.2

어려움: State도 모나드처럼 보인다. 그러나 State는 형식 인수를 두 개 받지만, Monad를 구현하려면 인수가 하나인 형식 생성자가 필요하다. state모나드를 구현해 보고, 어떤 문제점이 있으며 그것들을 어떻게 해결해야 하는지 생각해보기 바란다. 해결책은 이번 장에서 나중에 논의할 것이다.
