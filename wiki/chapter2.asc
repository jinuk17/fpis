= 2 스칼라로 함수형 프로그래밍 시작하기
김지수 <kjs8469@gmail.com>, jayden.uk <jinuk17@ggmail.com>
1.0, 2017-01-12
:toc:

== 학습목표
* 책을 이해하는 수준의 *스칼라 언어*를 배우기
** 함수와 프로그램을 정의하는 법
** 프로그램의 실행
** 모듈, 객체, 이름공간
* 기본적 *함수형 프로그래밍 개념* 익히기
** **재귀**를 이용한 루프
** *고차함수*
** *다형적 함수*

== 2.1 스칼라 언어의 소개: 예제 하나
==== 함수와 프로그램을 정의하는 법
[source,scala]
.목록2.1
----
// 이것은 주석
/* 이것도 주석 */
/** 문서화 주석 */
object MyModule {<1>
  def abs(n: Int): Int =<2>
    if (n < 0) -n
    else n<3>

  private def formatAbs(x: Int) = {<4><5>
    val msg = "The absolute value of %d is %d"<6>
    msg.format(x, abs(x))
  }

  def main(args: Array[String]): Unit =<7>
    println(formatAbs(-42))
}
----
<1> singleton 객체 선언
<2> 정수를 하나 받고 정수를 리턴하는 signature(좌변, left-hand side)
<3> 명시적인 return 이 없음
<4> Access modifiers(no modifier, protected, private)
<5> 반환타입을 명시적으로 지정하지 않음(타입추론으로 가능하지만 명시적으로 지정하는것을 권장)
<6> val 은 immutable
<7> Unit 은 void 과 같은 목적, 부수효과 발생(impure function)

----
object 키워드

* singleton 객체를 생성
* java의 정적 멤버를 가진 클래스를 사용하는 상황에 사용
* Companion Object를 만들때 사용
----

[TIP]
====
Scala access levels http://www.jesperdj.com/2016/01/08/scala-access-modifiers-and-qualifiers-in-detail/[Access modifiers in Java and Scala]
[cols="6*", options="header"]
|===
|Modifier|Class|Companion|Subclass|Package|World

|_no modifier_|Y|Y|Y|Y|Y

|`protected`|Y|Y|Y|N^*^|N

|`private`|Y|Y|N|N^*^|N
|===
^*^: Top-level protected and private members are accessible from inside the package.
====

== 2.2 프로그램의 실행
* 보통 sbt 활용, IDE(IntelliJ, Eclipse 등)를 활용
* 콘솔에서 컴파일 및 실행가능
* REPL(read-evaluate-print loop)으로 대화식으로 실행가능

.콘솔에서 컴파일 및 실행
----
> scalac MyModule.scala

> scala MyModule
The absolute value of -42 is 42.

> scala MyModule.scala
The absolute value of -42 is 42.
----

.REPL로 실행
----
♫  scala
Welcome to Scala 2.11.8 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_51).
Type in expressions for evaluation. Or try :help.

scala> :load MyModule.scala
Loading MyModule.scala...
defined object MyModule

scala> MyModule.abs(-42)
res0: Int = 42
----

== 2.3 모듈(module), 객체(object), 이름공간(namespace)
* 스칼라의 모든 값은 객체이다.
* 각 객체는 0개 또는 하나 이상의 멤버를 가질 수 있다.
* 모듈은 자신의 멤버들에게 namespace를 제공하는 것이 주된 목적인 객체
* 멤버는 def(메서드) 혹은 val, object 로 선언된 또 다른객체일 수 있다.
* 2 + 1 같은 표현식도 객체의 멤버를 호출
* 2 + 1 == 2.+(1)
* 중위(infix) 표기법으로 호출
* ::는 https://en.wikipedia.org/wiki/Operator_associativity[right-associative] ( http://stackoverflow.com/questions/1162924/what-good-are-right-associative-methods-in-scala[what-good-are-right-associative-methods-in-scala] )
* MyModule.abs(42) -> MyModule abs 42
* import 로 불러올 수 있다.

----
scala> import MyModule.abs
import MyModule.abs

scala> abs(-42)
res0: Int = 42
----

----
scala> import MyModule._
import MyModule._

scala> abs(-42)
res0: Int = 42
----

== 2.4 고차 함수: 함수를 함수에 전달

* 값으로서의 함수
* 고차 함수(higher-order function. HOF)

=== 2.4.1 잠깐 곁가지: 함수적으로 루프 작성하기
==== 반복문을 함수적으로 작성하는 방법
반복문 내부적으로 상태를 저장/변경하는 것(부수효과)을 재귀 함수 이용하여 해결

꼬리 호출 제거(tail call elimination) 최적화::

스칼라 컴파일러는 자기 재귀(self-recursion)를 검출해서 +
꼬리 재귀(tail recursion)일 경우 while loop 를 사용했을 때와 같은 종류의 바이트 코드로 컴파일 +
=> stackover flow 해결

TIP: @tailrec 주석을 이용해서 컴파일 단계에서 꼬리 재귀를 검출할 수 있다.

[source, Scala]
----
//꼬리재귀 X
def factorial(i: Int): Int = {
  if( i == 1 ) i
  else i * factorial1(i - 1)
}

//꼬리재귀 O
def factorial(n: Int): Int = {
  @tailrec
  def go(n: Int, acc: Int): Int =
    if (n <= 0) acc
    else go(n-1, n*acc)

  go(n, 1)
}
----

=== 2.4.2 첫 번째 고차 함수 작성

==== 고차 함수
함수를 인자로 받는 함수

[source,scala]
----
def formatAbs(x: Int) = {
  val msg = "The absolute value of %d is %d."
  msg.format(x, abs(x))
}

def formatFactorial(n: Int) = {
  val msg = "The factorial of %d is %d."
  msg.format(n, Factorial(n))
}
----

[source,scala]
----
def formatResult(name: String, n: Int , f: Int => Int) = {
  val msg = "The %s of %d is %d."
  msg.format(name, n, f(n))
}

formatResult("absolute value", -42, abs)
formatResult("factorial", 7, factorial)
----

== 2.5 다형적 함수: 형식에 대한 추상

단형적 함수 (momomorhic function)::
한 형식에의 자료에만 작용하는 함수

다형적 함수 (polymorphic function)::
 임의의 형식에 대해 작동하는 함수

=== 2.5.1 다형적 함수의 예

[source,scala]
----
def findFirst (ss: Array[String], key: String): Int = {
  @annotation.tailrec
  def loop(n: Int): Int =
    if(n >= ss.length) -1
    else if (ss(n) == key)) n
    else loop(n + 1)

  loop(0)
}
----

[source,scala]
----
def findFirst[A] (as: Array[A], p: A => Boolean): Int = {
    @annotation.tailrec
    def loop(n: Int): Int =
      if(n >= as.length) -1
      else if (p(as(n))) n
      else loop(n + 1)

    loop(0)
}
----

=== 2.5.2 익명 함수로 고차 함수 호출

고차함수를 호출할 때, 기존의 이름 붙은 함수를 인수로 지정해서 호출하는 것이 아니라 익명 함수(anonymous function) 또는 함수 리터럴(function literal)을 지정해서 호출하는 것이 편리함.

[source,scala]
----
//이름 붙은 함수 인자
formatResult("absolute value", -42, abs)

//익명 함수 인자
formatResult("absolute value", -42, (x: Int) => if(x < 0) -n else n)
----

==== 스칼라에서 값으로서의 함수
함수 리터럴 정의할 때, 실제로 apply 라는 메서드를 가진 객체이다. apply 라는 메서드를 가진 객체는 그 자체를 메서드인 것 처럼 호출 할 수가 있다.

[source,scala]
----
// 함수 리터럴
val lessThan = (a: Int, b: Int): Boolean => a < b

// 실제 생성되는 객체
val lessThan = new Function2[Int, Int, Boolean] {
 def apply(a: Int, b:Int) = a < b
}
----

NOTE: 스칼라 라이브러리에서는 Function0~22의 trait을 지원 (Scala version 2.11.8 기준)


== 2.6 형식에서 도출된 구현

==== 부분 적용(partial application)
인자 목록이 둘 이상 있는 함수의 경우, 필요한 인자 중 일부만 적용해 새로운 함수를 정의

[source,scala]
----
def partial1[A,B,C](a: A, f:(A,B) => C): B => C = {
  (b: B) => f(a, b)
}
----

==== 커링(currying)
여러 인자를 취하는 함수를 단 하나의 인자를 취하는 여러 함수의 연속으로 변환
[source,scala]
----
def uncurried(a: Int, b: String, c: Boolean): Boolean = true
var curried: (Int) => (String) => (Boolean) => Boolean = (uncurried _).curried
----
NOTE: 스칼라 라이브러리 Function0, 1을 제외한 FunctionN trait 에서 커링을 위한 curried 제공

==== 함수 합성 (compose, andThen)

스칼라 라이브러리에서는 Function1 trait 에서 함수 합성을 위한 compose와 andThen 제공

[source,scala]
----
val f = (x: Int) => x.toString
val g = (s: String) => s.toInt

val stringToString: (String) => String = f compose g
//f(g("10"))

var intToInt1: (Int) => Int = f andThen g
//g(f(10))

var intToInt2: (Int) => Int = g compose f
----

