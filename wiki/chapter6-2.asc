== 6.3 상태 있는 API를 순수하게 만들기

==== 상태 있는 API를 순수하게 하는 방법

[source,scala]
----
class Foo {
    private var s: FooState = ...
    def bar: Bar
    def baz: Int
}
----

- 다음과 같은 bar와 baz 각각 s(상태)를 변경하는 클래스를 순수 함수적 API로 변환

[source,scala]
----
trait Foo {
    def bar: (Bar, Foo)
    def baz: (Int, Foo)
}
----
- API가 실제로 뭔가를 변경하는 대신 다음 상태를 계산해서 호출자에게 돌려줌
- 계산된 다음 상태를 프로그램의 나머지 부분에 전달하는 책임을 호출자에게 전달하는 것


[source,scala]
----
def randomPair(rng: RNG): (Int, Int) = {
    val (i1, _) = rng.nextInt
    val (i2, _) = rng.nextInt
    (i1, i2)
}
// i1과 i2는 같다.
----
CAUTION: 만일 이전의 상태를 재사용한다면 이전에 발생한 값과 같은 값을 생성한다.
[source,scala]
----
def randomPair(rng: RNG): ((Int, Int), RNG) = {
    val (i1, rng2) = rng.nextInt
    val (i2, rng3) = rng2.nextInt
    ((i1, i2), rng3)
}
----

`*_연습문제 6.1 ~ 6.4_*`

== 6.4 상태 동작을 위한 더 나은 API

- 공통 패턴: A에 대해 RNG => (A, RNG)
- state action(상태 동작), state transition(상태 전이): 상태를 다른 상태로 변환하는 종류의 함수
- combinator(조합기): state action(상태 동작)을 조합할 수 있는 함수

IMPORTANT: 상태를 호출자가 직접 전달하는 것은 지루하고 반복적이므로, 조합기가 자동으로 한 동작에서 다른 동작으로 상태를 넘겨주게 한다.

===== 상태 동작 자료 형식에 대한 별칭(alias)
[source,scala]
----
type Rand[+A] = RNG => (A, RNG)

val int: Rand[Int] = _.nextInt
// (rng) => rng.nextInt
----
IMPORTANT: Rand 동작들을 조합하되 RNG 상태들을 명시적으로 전달하지 않아도 되는 조합기를 작성하는 것이 가능

[source,scala]
----
//RNG를 사용하지 않고 그대로 전달하는 RGN 상태 전이
def unit[A](a: A): Rand[A] =
    rng => (a, rng)

//상태 동작의 출력을 변환하되 상태 자체는 수정하지 않는 map, 함수 합성
def map[A, B](s: Rand[A])(f: A => B): Rand[B] =
    rng => {
        val (a, rng2) = s(rng)
        (f(a), rng2)
    }

def nonNegativeEven: Rand[Int] =
    map(nonNegativeInt)(i => i - i % 2)
----

`*_연습문제 6.5_*`

=== 6.4.1 상태 동작들의 조합

- map이 앞의 intDouble, doubleInt를 구현할 정도로 강력하지는 않다(아마도 상태를 2번 사용해서??)

`*_연습문제 6.6_*`

이항함수로 조합하는 새로운 조합기 map2
[source,scala]
----
def map2[A, B, C](ra: Rand[A], rb: Rand[B])(f: (A, B) => C): Rand[C] = ???

def both[A, B](ra: Rand[A], rb: Rand[B]): Rand[(A, B)] =
  map2(ra, rb)((_, _))

val randIntDouble: Rand[(Int, Double)] =
  both(int, double)

val randDoubleInt: Rand[(Double, Int)] =
  both(double, int)
----

`*_연습문제 6.7_*`

=== 6.4.2 내포된 상태 동작
- map과 map2로는 작성할 수 없는 함수들 ...

0 이상 n 미만의 정수 난수를 발행하는 nonNegativeLessThan
[source,scala]
----
def nonNegativeLessThan(n: Int): Rand[Int] = ???

//전체적으로 난수가 치우칠 수도 있음.
def nonNegativeLessThan(n: Int): Rand[Int] =
    map(nonNegativeInt) { _ % n }

def nonNegativeLessThan(n: Int): Rand[Int] =
    map(nonNegativeInt) { i =>
        val mod = i % n
        if (i + (n-1) - mod >= 0) mod else nonNegativeLessThan(n)(???)
    }

def nonNegativeLessThan(n: Int): Rand[Int] = { rng =>
    val (i, rng2) = nonNegativeInt(rng)
    val mod = i % n
    if (i + (n-1) - mod >= 0)
        (mod, rng2)
    else nonNegativeLessThan(n)(rng2)
}
----

`*_연습문제 6.8 ~ 6.9_*`

[source,scala]
----
def rollDie: Rand[Int] = nonNegativeLessThan(6)
//상태 전이, 조합기를 통해 간단히 해결
def rollDie: Rand[Int] = map(nonNegativeLessThan(6))(_ + 1)
----