== 6.3 상태 있는 API를 순수하게 만들기

==== 상태 있는 API를 순수하게 하는 방법
API가 실제로 뭔가를 변이하는 대신 다음 상태를 계산해서 호출자에게 돌려줌.
계산된 다음 상태를 프로그램의 나머지 부분에 전달하는 책임을 호출자에게 전달하는 것.


== 6.4 상태 동작을 위한 더 나은 API
공통 패턴: A에 대해 RNG => (A, RNG)

state action(상태 동작), state transition(상태 전이)
combinator(조합기)
상태를 호출자가 직접 전달하는 것을 지루하고 반복적이므로, 조합기가 자동으로 한 동작에서 다른 동작으로 상태를 넘겨주게 한다.

alias

type Rand[+A] = RNG => (A, RNG)

val int: Rand[Int] = _.nextInt

Rand 동작들을 조합하되 RNG 상태들을 명시적으로 전달하지 않아도 되는 조합기를 작성하는 것이 가능

DSL(domain-specific language)


RNG를 사용하지 않고 그대로 전달하는 가장 간단한 형태의 RNG 상태 전이인 unit

def unit[A](a: A): Rand[A] =
  rng => (a, rng)

상태 동작의 출력을 변환하되 상태 자체는 수정하지 않는 map(함수 합성)

def map[A, B](s: Rand[A])(f: A => B): Rand[B] =
  rng => {
    val (a, rng2) = s(rng)
    (f(a), rng2)
  }

=== 6.4.1 상태 동작들의 조합

map이 앞의 intDouble, doubleInt를 구현할 정도로 강력하지는 않다
: 아마도 상태를 2번 사용해서??

이항함수로 조합하는 새로운 조합기


=== 6.4.2 내포된 상태 동작
